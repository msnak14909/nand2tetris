// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

/**       scope:        [15:0]            [15:12]       [14:13]
 * memory map:          Address(16)       Address(2)    Address(2)
          RAM:          0x0000 ~ 0x3fff : 0000        : 00
          SCREEN:       0x4000 ~ 0x5fff : 0100        : 10
          KEYBOARD:     0x6000          : 0110        : 11

          idea: take 00~01 to repersent RAM
                     10    "  "         SCREEN
                     11    "  "         KEYBOARD

   Read:  out(t) = Memory[address(t)](t)
   Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    
    DMux4Way(in=load, sel=address[13..14], a=r0, b=r1, c=sc, d=kbd);
    Or(a=r0, b=r1, out=r);
    
    RAM16K(in=in, load=r, address=address[0..13], out=ro);
    Screen(in=in, load=sc, address=address[0..12], out=sco);
    Keyboard(out=ko);
    
    Mux4Way16(a=ro, b=ro, c=sco, d=ko, sel=address[13..14], out=out);
}
